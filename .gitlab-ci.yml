stages:
  - version
  - dependencies
  - test
  - build
  - upload
  - release
  - bump

variables:
  PACKAGE_REGISTRY_URL: '${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/gitdock'

release-version-creation:
  stage: version
  only:
    - tags
  script:
    - echo "VERSION=$(cat package.json | grep version | head -1 | awk -F= "{ print $2 }" | sed 's/[version:,\",]//g' | tr -d '[[:space:]]')" > version.env
  artifacts:
    reports:
      dotenv: version.env

install-dependencies-windows:
  stage: dependencies
  only:
    - tags
    - merge_requests
  tags:
    - windows
    - shared-windows
    - windows-1809
  before_script:
    - cup nodejs.install -y
  script:
    - npm ci
  cache:
    key: $CI_COMMIT_REF_SLUG-windows
    paths:
      - node_modules/

install-dependencies-mac:
  stage: dependencies
  only:
    - tags
    - merge_requests
  except:
    variables:
      # Skip job in forks; macOS runners are in a restricted beta
      - $CI_PROJECT_ID != "28462485"
  tags:
    - shared-macos-amd64
  image: macos-12-xcode-13
  script:
    - npm install -g npm@latest
    - npm ci
  cache:
    key: $CI_COMMIT_REF_SLUG-mac
    paths:
      - node_modules/

install-dependencies-linux:
  stage: dependencies
  only:
    - tags
    - merge_requests
    - main
  tags:
    - linux
  image: node:latest
  script:
    - npm ci
  cache:
    key: $CI_COMMIT_REF_SLUG-linux
    paths:
      - node_modules/

feature-tests:
  stage: test
  only:
    - tags
    - merge_requests
    - main
  tags:
    - linux
  image: mcr.microsoft.com/playwright:v1.23.1-focal
  needs: ['install-dependencies-linux']
  cache:
    key: $CI_COMMIT_REF_SLUG-linux
    paths:
      - node_modules/
    policy: pull
  script:
    - npm install -D @playwright/test
    - npm run playwright
  artifacts:
    when: always
    paths:
      - junit.xml
    reports:
      junit: junit.xml

prettier:
  stage: test
  only:
    - tags
    - merge_requests
    - main
  tags:
    - linux
  image: node:latest
  needs: ['install-dependencies-linux']
  cache:
    key: $CI_COMMIT_REF_SLUG-linux
    paths:
      - node_modules/
    policy: pull
  script:
    - npm run prettier:check

eslint:
  stage: test
  only:
    - tags
    - merge_requests
    - main
  tags:
    - linux
  image: node:latest
  needs: ['install-dependencies-linux']
  cache:
    key: $CI_COMMIT_REF_SLUG-linux
    paths:
      - node_modules/
    policy: pull
  script:
    - npm run lint:check
  artifacts:
    reports:
      codequality: gl-codequality.json

build-windows:
  stage: build
  only:
    - tags
    - merge_requests
  tags:
    - windows
    - shared-windows
    - windows-1809
  needs: ['install-dependencies-windows']
  cache:
    key: $CI_COMMIT_REF_SLUG-windows
    paths:
      - node_modules/
    policy: pull
  before_script:
    - cup nodejs.install -y
  script:
    - npm run make -- --platform=win32
  artifacts:
    paths:
      - out/make
    expire_in: 1 hour

build-mac:
  stage: build
  only:
    - tags
    - merge_requests
  except:
    variables:
      # Skip job in forks; macOS runners are in a restricted beta
      - $CI_PROJECT_ID != "28462485"
  tags:
    - shared-macos-amd64
  image: macos-12-xcode-13
  needs: ['install-dependencies-mac']
  cache:
    key: $CI_COMMIT_REF_SLUG-mac
    paths:
      - node_modules/
    policy: pull
  script:
    - brew update
    - brew install dpkg && brew install rpm
    - npm rebuild
    - npm run make -- --platform=darwin
  artifacts:
    paths:
      - out/make
    expire_in: 1 hour

build-linux:
  stage: build
  only:
    - tags
    - merge_requests
  tags:
    - linux
  image: node:latest
  needs: ['install-dependencies-linux']
  cache:
    key: $CI_COMMIT_REF_SLUG-linux
    paths:
      - node_modules/
    policy: pull
  script:
    - apt-get update && apt-get -y install fakeroot rpm
    - npm run make -- --platform=linux
  artifacts:
    paths:
      - out/make
    expire_in: 1 hour

upload:
  stage: upload
  needs:
    - job: build-mac
      artifacts: true
    - job: build-linux
      artifacts: true
    - job: build-windows
      artifacts: true
    - job: release-version-creation
      artifacts: true
  image: curlimages/curl:latest
  only:
    - tags
  script:
    - |
      curl --header "JOB-TOKEN: ${CI_JOB_TOKEN}" --upload-file out/make/GitDock-${VERSION}-x64.dmg ${PACKAGE_REGISTRY_URL}/${VERSION}/GitDock-${VERSION}.dmg
    - |
      curl --header "JOB-TOKEN: ${CI_JOB_TOKEN}" --upload-file out/make/squirrel.windows/x64/GitDock.exe ${PACKAGE_REGISTRY_URL}/${VERSION}/GitDock-${VERSION}.exe
    - |
      curl --header "JOB-TOKEN: ${CI_JOB_TOKEN}" --upload-file out/make/rpm/x64/GitDock-${VERSION}-1.x86_64.rpm ${PACKAGE_REGISTRY_URL}/${VERSION}/GitDock-${VERSION}.rpm
    - |
      curl --header "JOB-TOKEN: ${CI_JOB_TOKEN}" --upload-file out/make/deb/x64/gitdock_${VERSION}_amd64.deb ${PACKAGE_REGISTRY_URL}/${VERSION}/GitDock-${VERSION}.deb

release:
  stage: release
  needs:
    - job: build-mac
      artifacts: true
    - job: build-linux
      artifacts: true
    - job: build-windows
      artifacts: true
    - job: release-version-creation
      artifacts: true
    - upload
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  only:
    - tags
  except:
    - branches
  script:
    - echo "v$VERSION"
    - echo "${PACKAGE_REGISTRY_URL}/${VERSION}/GitDock-${VERSION}.dmg"
  release:
    name: 'v$VERSION'
    tag_name: 'v$VERSION'
    description: 'v$VERSION'
    assets:
      links:
        - name: 'MacOS'
          url: '${PACKAGE_REGISTRY_URL}/${VERSION}/GitDock-${VERSION}.dmg'
          filepath: '/GitDock-${VERSION}.dmg'
          link_type: 'other'
        - name: 'Windows'
          url: '${PACKAGE_REGISTRY_URL}/${VERSION}/GitDock-${VERSION}.exe'
          filepath: '/GitDock-${VERSION}.exe'
          link_type: 'other'
        - name: 'Linux deb'
          url: '${PACKAGE_REGISTRY_URL}/${VERSION}/GitDock-${VERSION}.deb'
          filepath: '/GitDock-${VERSION}.deb'
          link_type: 'other'
        - name: 'Linux rpm'
          url: '${PACKAGE_REGISTRY_URL}/${VERSION}/GitDock-${VERSION}.rpm'
          filepath: '/GitDock-${VERSION}.rpm'
          link_type: 'other'

bump:
  stage: bump
  only:
    - tags
  tags:
    - shared-macos-amd64
  image: macos-12-xcode-13
  script:
    - export HOMEBREW_GITHUB_API_TOKEN=${GITHUB_TOKEN}
    - git config --global user.email "maclbb@hotmail.de"
    - git config --global user.name "Marcel van Remmerden"
    - brew update && brew bump-cask-pr --version ${VERSION} gitdock --no-browse
